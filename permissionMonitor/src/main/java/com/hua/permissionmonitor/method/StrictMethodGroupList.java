
package com.hua.permissionmonitor.method;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 * ⣿⣿⣿⣿⣿⣿⢟⣡⣴⣶⣶⣦⣌⡛⠟⣋⣩⣬⣭⣭⡛⢿⣿⣿⣿⣿
 * ⣿⣿⣿⣿⠋⢰⣿⣿⠿⣛⣛⣙⣛⠻⢆⢻⣿⠿⠿⠿⣿⡄⠻⣿⣿⣿
 * ⣿⣿⣿⠃⢠⣿⣿⣶⣿⣿⡿⠿⢟⣛⣒⠐⠲⣶⡶⠿⠶⠶⠦⠄⠙⢿
 * ⣿⠋⣠⠄⣿⣿⣿⠟⡛⢅⣠⡵⡐⠲⣶⣶⣥⡠⣤⣵⠆⠄⠰⣦⣤⡀
 * ⠇⣰⣿⣼⣿⣿⣧⣤⡸ ⣿⡀⠂⠁⣸⣿⣿⣿⣿⣇⠄⠈⢀⣿⣿⠿
 * ⣰⣿⣿⣿⣿⣿⣿⣿⣷⣤⣈⣙⠶⢾⠭⢉⣁⣴⢯⣭⣵⣶⠾⠓⢀⣴
 * ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣉⣤⣴⣾⣿⣿⣦⣄⣤⣤⣄⠄⢿⣿
 * ⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠈⢿
 * ⣿⣿⣿⣿⣿⣿⡟⣰⣞⣛⡒⢒⠤⠦⢬⣉⣉⣉⣉⣉⣉⣉⡥⠴⠂⢸
 * ⠻⣿⣿⣿⣿⣏⠻⢌⣉⣉⣩⣉⡛⣛⠒⠶⠶⠶⠶⠶⠶⠶⠶⠂⣸⣿
 * ⣥⣈⠙⡻⠿⠿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⠿⠛⢉⣠⣶⣶⣿⣿
 * ⣿⣿⣿⣶⣬⣅⣒⣒⡂⠈⠭⠭⠭⠭⠭⢉⣁⣄⡀⢾⣿⣿⣿⣿⣿⣿
 *
 * 
 * 
* 通过脚本生成:2021-07-21 18:22:33
* @author hua
* @file MethodGroupList
*/

public class StrictMethodGroupList {

    public List<ClassMethodGroup> getClassGroupList(){
        HashMap<String,ClassMethodGroup> map = new HashMap<>();
        //-----------------------------------------------
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","addAccount");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","confirmCredentials");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","editProperties");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","getAccountRemovalAllowed");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","getAuthToken");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","getAuthTokenLabel");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","hasFeatures");
		addMethod(map,"android.accounts.AbstractAccountAuthenticator$Transport","updateCredentials");
		addMethod(map,"android.accounts.AccountManagerService","addAccount");
		addMethod(map,"android.accounts.AccountManagerService","addAcount");
		addMethod(map,"android.accounts.AccountManagerService","clearPassword");
		addMethod(map,"android.accounts.AccountManagerService","confirmCredentials");
		addMethod(map,"android.accounts.AccountManagerService","editProperties");
		addMethod(map,"android.accounts.AccountManagerService","getAccounts");
		addMethod(map,"android.accounts.AccountManagerService","getAccountsByFeatures");
		addMethod(map,"android.accounts.AccountManagerService","getAuthToken");
		addMethod(map,"android.accounts.AccountManagerService","getPassword");
		addMethod(map,"android.accounts.AccountManagerService","getUserData");
		addMethod(map,"android.accounts.AccountManagerService","hasFeatures");
		addMethod(map,"android.accounts.AccountManagerService","invalidateAuthToken");
		addMethod(map,"android.accounts.AccountManagerService","peekAuthToken");
		addMethod(map,"android.accounts.AccountManagerService","removeAccount");
		addMethod(map,"android.accounts.AccountManagerService","setAuthToken");
		addMethod(map,"android.accounts.AccountManagerService","setPassword");
		addMethod(map,"android.accounts.AccountManagerService","setUserData");
		addMethod(map,"android.accounts.AccountManagerService","updateCredentials");
		addMethod(map,"android.content.ContentService","addPeriodicSync");
		addMethod(map,"android.content.ContentService","getCurrentSyncs");
		addMethod(map,"android.content.ContentService","getIsSyncable");
		addMethod(map,"android.content.ContentService","getMasterSyncAutomatically");
		addMethod(map,"android.content.ContentService","getPeriodicSyncs");
		addMethod(map,"android.content.ContentService","getSyncAutomatically");
		addMethod(map,"android.content.ContentService","getSyncStatus");
		addMethod(map,"android.content.ContentService","isSyncActive");
		addMethod(map,"android.content.ContentService","isSyncPending");
		addMethod(map,"android.content.ContentService","removePeriodicSync");
		addMethod(map,"android.content.ContentService","setIsSyncable");
		addMethod(map,"android.content.ContentService","setMasterSyncAutomatically");
		addMethod(map,"android.content.ContentService","setSyncAutomatically");
		addMethod(map,"android.media.AudioService","registerMediaButtonEventReceiverForCalls");
		addMethod(map,"android.media.AudioService","setBluetoothScoOn");
		addMethod(map,"android.media.AudioService","setMode");
		addMethod(map,"android.media.AudioService","setRingtonePlayer");
		addMethod(map,"android.media.AudioService","setSpeakerphoneOn");
		addMethod(map,"android.media.AudioService","startBluetoothSco");
		addMethod(map,"android.media.AudioService","stopBluetoothSco");
		addMethod(map,"android.media.AudioService","unregisterMediaButtonEventReceiverForCalls");
		addMethod(map,"android.net.wifi.p2p.WifiP2pService","getMessenger");
		addMethod(map,"android.server.BluetoothA2dpService","allowIncomingConnect");
		addMethod(map,"android.server.BluetoothA2dpService","connect");
		addMethod(map,"android.server.BluetoothA2dpService","connectSinkInternal");
		addMethod(map,"android.server.BluetoothA2dpService","disconnect");
		addMethod(map,"android.server.BluetoothA2dpService","disconnectSinkInternal");
		addMethod(map,"android.server.BluetoothA2dpService","getConnectedDevices");
		addMethod(map,"android.server.BluetoothA2dpService","getConnectionState");
		addMethod(map,"android.server.BluetoothA2dpService","getDevicesMatchingConnectionStates");
		addMethod(map,"android.server.BluetoothA2dpService","getPriority");
		addMethod(map,"android.server.BluetoothA2dpService","isA2dpPlaying");
		addMethod(map,"android.server.BluetoothA2dpService","resumeSink");
		addMethod(map,"android.server.BluetoothA2dpService","setPriority");
		addMethod(map,"android.server.BluetoothA2dpService","suspendSink");
		addMethod(map,"android.server.BluetoothService","addRfcommServiceRecord");
		addMethod(map,"android.server.BluetoothService","allowIncomingProfileConnect");
		addMethod(map,"android.server.BluetoothService","cancelBondProcess");
		addMethod(map,"android.server.BluetoothService","cancelDiscovery");
		addMethod(map,"android.server.BluetoothService","cancelPairingUserInput");
		addMethod(map,"android.server.BluetoothService","changeApplicationBluetoothState");
		addMethod(map,"android.server.BluetoothService","connectChannelToSink");
		addMethod(map,"android.server.BluetoothService","connectChannelToSource");
		addMethod(map,"android.server.BluetoothService","connectHeadset");
		addMethod(map,"android.server.BluetoothService","connectInputDevice");
		addMethod(map,"android.server.BluetoothService","connectPanDevice");
		addMethod(map,"android.server.BluetoothService","createBond");
		addMethod(map,"android.server.BluetoothService","createBondOutOfBand");
		addMethod(map,"android.server.BluetoothService","disable");
		addMethod(map,"android.server.BluetoothService","disconnectChannel");
		addMethod(map,"android.server.BluetoothService","disconnectHeadset");
		addMethod(map,"android.server.BluetoothService","disconnectInputDevice");
		addMethod(map,"android.server.BluetoothService","disconnectPanDevice");
		addMethod(map,"android.server.BluetoothService","enable");
		addMethod(map,"android.server.BluetoothService","enableNoAutoConnect");
		addMethod(map,"android.server.BluetoothService","fetchRemoteUuids");
		addMethod(map,"android.server.BluetoothService","getAddress");
		addMethod(map,"android.server.BluetoothService","getBluetoothState");
		addMethod(map,"android.server.BluetoothService","getBondState");
		addMethod(map,"android.server.BluetoothService","getConnectedHealthDevices");
		addMethod(map,"android.server.BluetoothService","getConnectedInputDevices");
		addMethod(map,"android.server.BluetoothService","getConnectedPanDevices");
		addMethod(map,"android.server.BluetoothService","getDiscoverableTimeout");
		addMethod(map,"android.server.BluetoothService","getHealthDeviceConnectionState");
		addMethod(map,"android.server.BluetoothService","getHealthDevicesMatchingConnectionStates");
		addMethod(map,"android.server.BluetoothService","getInputDeviceConnectionState");
		addMethod(map,"android.server.BluetoothService","getInputDevicePriority");
		addMethod(map,"android.server.BluetoothService","getInputDevicesMatchingConnectionStates");
		addMethod(map,"android.server.BluetoothService","getMainChannelFd");
		addMethod(map,"android.server.BluetoothService","getName");
		addMethod(map,"android.server.BluetoothService","getPanDeviceConnectionState");
		addMethod(map,"android.server.BluetoothService","getPanDevicesMatchingConnectionStates");
		addMethod(map,"android.server.BluetoothService","getProfileConnectionState");
		addMethod(map,"android.server.BluetoothService","getRemoteAlias");
		addMethod(map,"android.server.BluetoothService","getRemoteClass");
		addMethod(map,"android.server.BluetoothService","getRemoteName");
		addMethod(map,"android.server.BluetoothService","getRemoteServiceChannel");
		addMethod(map,"android.server.BluetoothService","getRemoteUuids");
		addMethod(map,"android.server.BluetoothService","getScanMode");
		addMethod(map,"android.server.BluetoothService","getTrustState");
		addMethod(map,"android.server.BluetoothService","getUuids");
		addMethod(map,"android.server.BluetoothService","isDiscovering");
		addMethod(map,"android.server.BluetoothService","isEnabled");
		addMethod(map,"android.server.BluetoothService","isTetheringOn");
		addMethod(map,"android.server.BluetoothService","listBonds");
		addMethod(map,"android.server.BluetoothService","readOutOfBandData");
		addMethod(map,"android.server.BluetoothService","registerAppConfiguration");
		addMethod(map,"android.server.BluetoothService","removeBond");
		addMethod(map,"android.server.BluetoothService","removeServiceRecord");
		addMethod(map,"android.server.BluetoothService","setBluetoothTethering");
		addMethod(map,"android.server.BluetoothService","setDeviceOutOfBandData");
		addMethod(map,"android.server.BluetoothService","setDiscoverableTimeout");
		addMethod(map,"android.server.BluetoothService","setInputDevicePriority");
		addMethod(map,"android.server.BluetoothService","setName");
		addMethod(map,"android.server.BluetoothService","setPairingConfirmation");
		addMethod(map,"android.server.BluetoothService","setPasskey");
		addMethod(map,"android.server.BluetoothService","setPin");
		addMethod(map,"android.server.BluetoothService","setRemoteAlias");
		addMethod(map,"android.server.BluetoothService","setRemoteOutOfBandData");
		addMethod(map,"android.server.BluetoothService","setScanMode");
		addMethod(map,"android.server.BluetoothService","setTrust");
		addMethod(map,"android.server.BluetoothService","startDiscovery");
		addMethod(map,"android.server.BluetoothService","unregisterAppConfiguration");
		addMethod(map,"com.android.email.provider.AttachmentProvider","openFile");
		addMethod(map,"com.android.internal.telephony.IccPhoneBookInterfaceManager","getAdnRecordsInEf");
		addMethod(map,"com.android.internal.telephony.IccPhoneBookInterfaceManager","updateAdnRecordsInEfByIndex");
		addMethod(map,"com.android.internal.telephony.IccPhoneBookInterfaceManager","updateAdnRecordsInEfBySearch");
		addMethod(map,"com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy","getAdnRecordsInEf");
		addMethod(map,"com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy","updateAdnRecordsInEfByIndex");
		addMethod(map,"com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy","updateAdnRecordsInEfBySearch");
		addMethod(map,"com.android.internal.telephony.IccSmsInterfaceManager","sendData");
		addMethod(map,"com.android.internal.telephony.IccSmsInterfaceManager","sendMultipartText");
		addMethod(map,"com.android.internal.telephony.IccSmsInterfaceManager","sendText");
		addMethod(map,"com.android.internal.telephony.IccSmsInterfaceManagerProxy","sendData");
		addMethod(map,"com.android.internal.telephony.IccSmsInterfaceManagerProxy","sendMultipartText");
		addMethod(map,"com.android.internal.telephony.IccSmsInterfaceManagerProxy","sendText");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getCompleteVoiceMailNumber");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getDeviceId");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getDeviceSvn");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getIccSerialNumber");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getIsimDomain");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getIsimImpi");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getIsimImpu");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getLine1AlphaTag");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getLine1Number");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getMsisdn");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getSubscriberId");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getVoiceMailAlphaTag");
		addMethod(map,"com.android.internal.telephony.PhoneSubInfo","getVoiceMailNumber");
		addMethod(map,"com.android.internal.telephony.cdma.RuimSmsInterfaceManager","copyMessageToIccEf");
		addMethod(map,"com.android.internal.telephony.cdma.RuimSmsInterfaceManager","getAllMessagesFromIccEf");
		addMethod(map,"com.android.internal.telephony.cdma.RuimSmsInterfaceManager","updateMessageOnIccEf");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","copyMessageToIccEf");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","disableCellBroadcast");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","disableCellBroadcastRange");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","enableCellBroadcast");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","enableCellBroadcastRange");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","getAllMessagesFromIccEf");
		addMethod(map,"com.android.internal.telephony.gsm.SimSmsInterfaceManager","updateMessageOnIccEf");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterExtrasService","authenticate");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterExtrasService","close");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterExtrasService","getCardEmulationRoute");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterExtrasService","open");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterExtrasService","setCardEmulationRoute");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterExtrasService","transceive");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","disable");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","disableNdefPush");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","dispatch");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","enable");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","enableNdefPush");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","getNfcAdapterExtrasInterface");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","setForegroundDispatch");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","setNdefPushCallback");
		addMethod(map,"com.android.nfc.NfcService$NfcAdapterService","setP2pModes");
		addMethod(map,"com.android.nfc.NfcService$TagService","close");
		addMethod(map,"com.android.nfc.NfcService$TagService","connect");
		addMethod(map,"com.android.nfc.NfcService$TagService","formatNdef");
		addMethod(map,"com.android.nfc.NfcService$TagService","getTechList");
		addMethod(map,"com.android.nfc.NfcService$TagService","getTimeout");
		addMethod(map,"com.android.nfc.NfcService$TagService","isNdef");
		addMethod(map,"com.android.nfc.NfcService$TagService","ndefMakeReadOnly");
		addMethod(map,"com.android.nfc.NfcService$TagService","ndefRead");
		addMethod(map,"com.android.nfc.NfcService$TagService","ndefWrite");
		addMethod(map,"com.android.nfc.NfcService$TagService","reconnect");
		addMethod(map,"com.android.nfc.NfcService$TagService","rediscover");
		addMethod(map,"com.android.nfc.NfcService$TagService","resetTimeouts");
		addMethod(map,"com.android.nfc.NfcService$TagService","setTimeout");
		addMethod(map,"com.android.nfc.NfcService$TagService","transceive");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","answerRingingCall");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","call");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","cancelMissedCallsNotification");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","disableApnType");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","disableDataConnectivity");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","disableLocationUpdates");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","enableApnType");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","enableDataConnectivity");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","enableLocationUpdates");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","endCall");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","getAllCellInfo");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","getCellLocation");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","getNeighboringCellInfo");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","handlePinMmi");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","isSimPinEnabled");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","setRadio");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","silenceRinger");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","supplyPin");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","supplyPuk");
		addMethod(map,"com.android.phone.PhoneInterfaceManager","toggleRadioOnOff");
		addMethod(map,"com.android.providers.contacts.AbstractContactsProvider","bulkInsert");
		addMethod(map,"com.android.providers.contacts.AbstractContactsProvider","delete");
		addMethod(map,"com.android.providers.contacts.AbstractContactsProvider","insert");
		addMethod(map,"com.android.providers.contacts.AbstractContactsProvider","update");
		addMethod(map,"com.android.providers.contacts.CallLogProvider","delete");
		addMethod(map,"com.android.providers.contacts.CallLogProvider","insert");
		addMethod(map,"com.android.providers.contacts.CallLogProvider","update");
		addMethod(map,"com.android.providers.contacts.ContactsProvider2","bulkInsert");
		addMethod(map,"com.android.providers.contacts.ContactsProvider2","call");
		addMethod(map,"com.android.providers.contacts.ContactsProvider2","delete");
		addMethod(map,"com.android.providers.contacts.ContactsProvider2","getType");
		addMethod(map,"com.android.providers.contacts.ContactsProvider2","insert");
		addMethod(map,"com.android.providers.contacts.ContactsProvider2","update");
		addMethod(map,"com.android.providers.contacts.ProfileProvider","openAssetFile");
		addMethod(map,"com.android.providers.contacts.VoicemailContentProvider","delete");
		addMethod(map,"com.android.providers.contacts.VoicemailContentProvider","insert");
		addMethod(map,"com.android.providers.contacts.VoicemailContentProvider","openFile");
		addMethod(map,"com.android.providers.contacts.VoicemailContentProvider","update");
		addMethod(map,"com.android.providers.downloads.DownloadProvider","delete");
		addMethod(map,"com.android.providers.downloads.DownloadProvider","insert");
		addMethod(map,"com.android.providers.downloads.DownloadProvider","openFile");
		addMethod(map,"com.android.providers.downloads.DownloadProvider","update");
		addMethod(map,"com.android.providers.drm.DrmProvider","delete");
		addMethod(map,"com.android.providers.drm.DrmProvider","insert");
		addMethod(map,"com.android.providers.drm.DrmProvider","update");
		addMethod(map,"com.android.providers.media.MediaProvider","openFile");
		addMethod(map,"com.android.providers.settings.SettingsProvider","bulkInsert");
		addMethod(map,"com.android.providers.settings.SettingsProvider","delete");
		addMethod(map,"com.android.providers.settings.SettingsProvider","insert");
		addMethod(map,"com.android.providers.settings.SettingsProvider","openAssetFile");
		addMethod(map,"com.android.providers.settings.SettingsProvider","openFile");
		addMethod(map,"com.android.providers.settings.SettingsProvider","update");
		addMethod(map,"com.android.providers.telephony.TelephonyProvider","delete");
		addMethod(map,"com.android.providers.telephony.TelephonyProvider","insert");
		addMethod(map,"com.android.providers.telephony.TelephonyProvider","update");
		addMethod(map,"com.android.server.AlarmManagerService","setTime");
		addMethod(map,"com.android.server.AlarmManagerService","setTimeZone");
		addMethod(map,"com.android.server.AppWidgetService","bindAppWidgetId");
		addMethod(map,"com.android.server.AppWidgetService","bindAppWidgetIdIfAllowed");
		addMethod(map,"com.android.server.AppWidgetService","bindRemoteViewsService");
		addMethod(map,"com.android.server.AppWidgetService","deleteAppWidgetId");
		addMethod(map,"com.android.server.AppWidgetService","getAppWidgetInfo");
		addMethod(map,"com.android.server.AppWidgetService","getAppWidgetOptions");
		addMethod(map,"com.android.server.AppWidgetService","getAppWidgetViews");
		addMethod(map,"com.android.server.AppWidgetService","hasBindAppWidgetPermission");
		addMethod(map,"com.android.server.AppWidgetService","notifyAppWidgetViewDataChanged");
		addMethod(map,"com.android.server.AppWidgetService","partiallyUpdateAppWidgetIds");
		addMethod(map,"com.android.server.AppWidgetService","setBindAppWidgetPermission");
		addMethod(map,"com.android.server.AppWidgetService","unbindRemoteViewsService");
		addMethod(map,"com.android.server.AppWidgetService","updateAppWidgetIds");
		addMethod(map,"com.android.server.AppWidgetService","updateAppWidgetOptions");
		addMethod(map,"com.android.server.AppWidgetService","updateAppWidgetProvider");
		addMethod(map,"com.android.server.BackupManagerService$ActiveRestoreSession","getAvailableRestoreSets");
		addMethod(map,"com.android.server.BackupManagerService$ActiveRestoreSession","restoreAll");
		addMethod(map,"com.android.server.BackupManagerService$ActiveRestoreSession","restorePackage");
		addMethod(map,"com.android.server.BackupManagerService$ActiveRestoreSession","restoreSome");
		addMethod(map,"com.android.server.BackupManagerService","acknowledgeFullBackupOrRestore");
		addMethod(map,"com.android.server.BackupManagerService","backupNow");
		addMethod(map,"com.android.server.BackupManagerService","beginRestoreSession");
		addMethod(map,"com.android.server.BackupManagerService","clearBackupData");
		addMethod(map,"com.android.server.BackupManagerService","dataChanged");
		addMethod(map,"com.android.server.BackupManagerService","fullBackup");
		addMethod(map,"com.android.server.BackupManagerService","fullRestore");
		addMethod(map,"com.android.server.BackupManagerService","getConfigurationIntent");
		addMethod(map,"com.android.server.BackupManagerService","getCurrentTransport");
		addMethod(map,"com.android.server.BackupManagerService","getDestinationString");
		addMethod(map,"com.android.server.BackupManagerService","hasBackupPassword");
		addMethod(map,"com.android.server.BackupManagerService","isBackupEnabled");
		addMethod(map,"com.android.server.BackupManagerService","listAllTransports");
		addMethod(map,"com.android.server.BackupManagerService","selectBackupTransport");
		addMethod(map,"com.android.server.BackupManagerService","setAutoRestore");
		addMethod(map,"com.android.server.BackupManagerService","setBackupEnabled");
		addMethod(map,"com.android.server.BackupManagerService","setBackupPassword");
		addMethod(map,"com.android.server.BackupManagerService","setBackupProvisioned");
		addMethod(map,"com.android.server.ConnectivityService","getActiveLinkProperties");
		addMethod(map,"com.android.server.ConnectivityService","getActiveNetworkInfo");
		addMethod(map,"com.android.server.ConnectivityService","getActiveNetworkInfoForUid");
		addMethod(map,"com.android.server.ConnectivityService","getActiveNetworkQuotaInfo");
		addMethod(map,"com.android.server.ConnectivityService","getAllNetworkInfo");
		addMethod(map,"com.android.server.ConnectivityService","getAllNetworkState");
		addMethod(map,"com.android.server.ConnectivityService","getLastTetherError");
		addMethod(map,"com.android.server.ConnectivityService","getLinkProperties");
		addMethod(map,"com.android.server.ConnectivityService","getMobileDataEnabled");
		addMethod(map,"com.android.server.ConnectivityService","getNetworkInfo");
		addMethod(map,"com.android.server.ConnectivityService","getNetworkPreference");
		addMethod(map,"com.android.server.ConnectivityService","getTetherableBluetoothRegexs");
		addMethod(map,"com.android.server.ConnectivityService","getTetherableIfaces");
		addMethod(map,"com.android.server.ConnectivityService","getTetherableUsbRegexs");
		addMethod(map,"com.android.server.ConnectivityService","getTetherableWifiRegexs");
		addMethod(map,"com.android.server.ConnectivityService","getTetheredIfacePairs");
		addMethod(map,"com.android.server.ConnectivityService","getTetheredIfaces");
		addMethod(map,"com.android.server.ConnectivityService","getTetheringErroredIfaces");
		addMethod(map,"com.android.server.ConnectivityService","isActiveNetworkMetered");
		addMethod(map,"com.android.server.ConnectivityService","isNetworkSupported");
		addMethod(map,"com.android.server.ConnectivityService","isTetheringSupported");
		addMethod(map,"com.android.server.ConnectivityService","reportInetCondition");
		addMethod(map,"com.android.server.ConnectivityService","requestNetworkTransitionWakelock");
		addMethod(map,"com.android.server.ConnectivityService","requestRouteToHost");
		addMethod(map,"com.android.server.ConnectivityService","requestRouteToHostAddress");
		addMethod(map,"com.android.server.ConnectivityService","setDataDependency");
		addMethod(map,"com.android.server.ConnectivityService","setGlobalProxy");
		addMethod(map,"com.android.server.ConnectivityService","setMobileDataEnabled");
		addMethod(map,"com.android.server.ConnectivityService","setNetworkPreference");
		addMethod(map,"com.android.server.ConnectivityService","setPolicyDataEnable");
		addMethod(map,"com.android.server.ConnectivityService","setRadio");
		addMethod(map,"com.android.server.ConnectivityService","setRadios");
		addMethod(map,"com.android.server.ConnectivityService","setUsbTethering");
		addMethod(map,"com.android.server.ConnectivityService","startUsingNetworkFeature");
		addMethod(map,"com.android.server.ConnectivityService","stopUsingNetworkFeature");
		addMethod(map,"com.android.server.ConnectivityService","tether");
		addMethod(map,"com.android.server.ConnectivityService","untether");
		addMethod(map,"com.android.server.DevicePolicyManagerService","getRemoveWarning");
		addMethod(map,"com.android.server.DevicePolicyManagerService","removeActiveAdmin");
		addMethod(map,"com.android.server.DevicePolicyManagerService","reportFailedPasswordAttempt");
		addMethod(map,"com.android.server.DevicePolicyManagerService","reportSuccessfulPasswordAttempt");
		addMethod(map,"com.android.server.DevicePolicyManagerService","setActiveAdmin");
		addMethod(map,"com.android.server.DevicePolicyManagerService","setActivePasswordState");
		addMethod(map,"com.android.server.DropBoxManagerService","getNextEntry");
		addMethod(map,"com.android.server.InputMethodManagerService","setInputMethod");
		addMethod(map,"com.android.server.InputMethodManagerService","setInputMethodAndSubtype");
		addMethod(map,"com.android.server.InputMethodManagerService","setInputMethodEnabled");
		addMethod(map,"com.android.server.InputMethodManagerService","switchToLastInputMethod");
		addMethod(map,"com.android.server.InputMethodManagerService","switchToNextInputMethod");
		addMethod(map,"com.android.server.LocationManagerService","addGpsStatusListener");
		addMethod(map,"com.android.server.LocationManagerService","addProximityAlert");
		addMethod(map,"com.android.server.LocationManagerService","addTestProvider");
		addMethod(map,"com.android.server.LocationManagerService","clearTestProviderEnabled");
		addMethod(map,"com.android.server.LocationManagerService","clearTestProviderLocation");
		addMethod(map,"com.android.server.LocationManagerService","clearTestProviderStatus");
		addMethod(map,"com.android.server.LocationManagerService","getBestProvider");
		addMethod(map,"com.android.server.LocationManagerService","getLastKnownLocation");
		addMethod(map,"com.android.server.LocationManagerService","getProviderInfo");
		addMethod(map,"com.android.server.LocationManagerService","getProviders");
		addMethod(map,"com.android.server.LocationManagerService","isProviderEnabled");
		addMethod(map,"com.android.server.LocationManagerService","removeTestProvider");
		addMethod(map,"com.android.server.LocationManagerService","reportLocation");
		addMethod(map,"com.android.server.LocationManagerService","requestLocationUpdates");
		addMethod(map,"com.android.server.LocationManagerService","requestLocationUpdatesPI");
		addMethod(map,"com.android.server.LocationManagerService","sendExtraCommand");
		addMethod(map,"com.android.server.LocationManagerService","setTestProviderEnabled");
		addMethod(map,"com.android.server.LocationManagerService","setTestProviderLocation");
		addMethod(map,"com.android.server.LocationManagerService","setTestProviderStatus");
		addMethod(map,"com.android.server.MountService","changeEncryptionPassword");
		addMethod(map,"com.android.server.MountService","createSecureContainer");
		addMethod(map,"com.android.server.MountService","decryptStorage");
		addMethod(map,"com.android.server.MountService","destroySecureContainer");
		addMethod(map,"com.android.server.MountService","encryptStorage");
		addMethod(map,"com.android.server.MountService","finalizeSecureContainer");
		addMethod(map,"com.android.server.MountService","fixPermissionsSecureContainer");
		addMethod(map,"com.android.server.MountService","formatVolume");
		addMethod(map,"com.android.server.MountService","getEncryptionState");
		addMethod(map,"com.android.server.MountService","getSecureContainerFilesystemPath");
		addMethod(map,"com.android.server.MountService","getSecureContainerList");
		addMethod(map,"com.android.server.MountService","getSecureContainerPath");
		addMethod(map,"com.android.server.MountService","getStorageUsers");
		addMethod(map,"com.android.server.MountService","isSecureContainerMounted");
		addMethod(map,"com.android.server.MountService","mountSecureContainer");
		addMethod(map,"com.android.server.MountService","mountVolume");
		addMethod(map,"com.android.server.MountService","renameSecureContainer");
		addMethod(map,"com.android.server.MountService","setUsbMassStorageEnabled");
		addMethod(map,"com.android.server.MountService","shutdown");
		addMethod(map,"com.android.server.MountService","unmountSecureContainer");
		addMethod(map,"com.android.server.MountService","unmountVolume");
		addMethod(map,"com.android.server.MountService","verifyEncryptionPassword");
		addMethod(map,"com.android.server.NetworkManagementService","addRoute");
		addMethod(map,"com.android.server.NetworkManagementService","addSecondaryRoute");
		addMethod(map,"com.android.server.NetworkManagementService","attachPppd");
		addMethod(map,"com.android.server.NetworkManagementService","clearInterfaceAddresses");
		addMethod(map,"com.android.server.NetworkManagementService","detachPppd");
		addMethod(map,"com.android.server.NetworkManagementService","disableIpv6");
		addMethod(map,"com.android.server.NetworkManagementService","disableNat");
		addMethod(map,"com.android.server.NetworkManagementService","enableIpv6");
		addMethod(map,"com.android.server.NetworkManagementService","enableNat");
		addMethod(map,"com.android.server.NetworkManagementService","flushDefaultDnsCache");
		addMethod(map,"com.android.server.NetworkManagementService","flushInterfaceDnsCache");
		addMethod(map,"com.android.server.NetworkManagementService","getDnsForwarders");
		addMethod(map,"com.android.server.NetworkManagementService","getInterfaceConfig");
		addMethod(map,"com.android.server.NetworkManagementService","getInterfaceRxThrottle");
		addMethod(map,"com.android.server.NetworkManagementService","getInterfaceTxThrottle");
		addMethod(map,"com.android.server.NetworkManagementService","getIpForwardingEnabled");
		addMethod(map,"com.android.server.NetworkManagementService","getNetworkStatsDetail");
		addMethod(map,"com.android.server.NetworkManagementService","getNetworkStatsSummaryDev");
		addMethod(map,"com.android.server.NetworkManagementService","getNetworkStatsSummaryXt");
		addMethod(map,"com.android.server.NetworkManagementService","getNetworkStatsTethering");
		addMethod(map,"com.android.server.NetworkManagementService","getNetworkStatsUidDetail");
		addMethod(map,"com.android.server.NetworkManagementService","getRoutes");
		addMethod(map,"com.android.server.NetworkManagementService","isBandwidthControlEnabled");
		addMethod(map,"com.android.server.NetworkManagementService","isTetheringStarted");
		addMethod(map,"com.android.server.NetworkManagementService","listInterfaces");
		addMethod(map,"com.android.server.NetworkManagementService","listTetheredInterfaces");
		addMethod(map,"com.android.server.NetworkManagementService","listTtys");
		addMethod(map,"com.android.server.NetworkManagementService","registerObserver");
		addMethod(map,"com.android.server.NetworkManagementService","removeInterfaceAlert");
		addMethod(map,"com.android.server.NetworkManagementService","removeInterfaceQuota");
		addMethod(map,"com.android.server.NetworkManagementService","removeRoute");
		addMethod(map,"com.android.server.NetworkManagementService","removeSecondaryRoute");
		addMethod(map,"com.android.server.NetworkManagementService","setAccessPoint");
		addMethod(map,"com.android.server.NetworkManagementService","setDefaultInterfaceForDns");
		addMethod(map,"com.android.server.NetworkManagementService","setDnsForwarders");
		addMethod(map,"com.android.server.NetworkManagementService","setDnsServersForInterface");
		addMethod(map,"com.android.server.NetworkManagementService","setGlobalAlert");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceAlert");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceConfig");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceDown");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceIpv6PrivacyExtensions");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceQuota");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceThrottle");
		addMethod(map,"com.android.server.NetworkManagementService","setInterfaceUp");
		addMethod(map,"com.android.server.NetworkManagementService","setIpForwardingEnabled");
		addMethod(map,"com.android.server.NetworkManagementService","setUidNetworkRules");
		addMethod(map,"com.android.server.NetworkManagementService","shutdown");
		addMethod(map,"com.android.server.NetworkManagementService","startAccessPoint");
		addMethod(map,"com.android.server.NetworkManagementService","startTethering");
		addMethod(map,"com.android.server.NetworkManagementService","stopAccessPoint");
		addMethod(map,"com.android.server.NetworkManagementService","stopTethering");
		addMethod(map,"com.android.server.NetworkManagementService","tetherInterface");
		addMethod(map,"com.android.server.NetworkManagementService","unregisterObserver");
		addMethod(map,"com.android.server.NetworkManagementService","untetherInterface");
		addMethod(map,"com.android.server.NetworkManagementService","wifiFirmwareReload");
		addMethod(map,"com.android.server.NsdService","getMessenger");
		addMethod(map,"com.android.server.NsdService","setEnabled");
		addMethod(map,"com.android.server.PowerManagerService","acquireWakeLock");
		addMethod(map,"com.android.server.PowerManagerService","clearUserActivityTimeout");
		addMethod(map,"com.android.server.PowerManagerService","crash");
		addMethod(map,"com.android.server.PowerManagerService","goToSleep");
		addMethod(map,"com.android.server.PowerManagerService","goToSleepWithReason");
		addMethod(map,"com.android.server.PowerManagerService","preventScreenOn");
		addMethod(map,"com.android.server.PowerManagerService","reboot");
		addMethod(map,"com.android.server.PowerManagerService","releaseWakeLock");
		addMethod(map,"com.android.server.PowerManagerService","setAttentionLight");
		addMethod(map,"com.android.server.PowerManagerService","setAutoBrightnessAdjustment");
		addMethod(map,"com.android.server.PowerManagerService","setBacklightBrightness");
		addMethod(map,"com.android.server.PowerManagerService","setMaximumScreenOffTimeount");
		addMethod(map,"com.android.server.PowerManagerService","setPokeLock");
		addMethod(map,"com.android.server.PowerManagerService","setStayOnSetting");
		addMethod(map,"com.android.server.PowerManagerService","updateWakeLockWorkSource");
		addMethod(map,"com.android.server.PowerManagerService","userActivity");
		addMethod(map,"com.android.server.PowerManagerService","userActivityWithForce");
		addMethod(map,"com.android.server.SerialService","getSerialPorts");
		addMethod(map,"com.android.server.SerialService","openSerialPort");
		addMethod(map,"com.android.server.StatusBarManagerService","collapse");
		addMethod(map,"com.android.server.StatusBarManagerService","disable");
		addMethod(map,"com.android.server.StatusBarManagerService","expand");
		addMethod(map,"com.android.server.StatusBarManagerService","onClearAllNotifications");
		addMethod(map,"com.android.server.StatusBarManagerService","onNotificationClear");
		addMethod(map,"com.android.server.StatusBarManagerService","onNotificationClick");
		addMethod(map,"com.android.server.StatusBarManagerService","onNotificationError");
		addMethod(map,"com.android.server.StatusBarManagerService","onPanelRevealed");
		addMethod(map,"com.android.server.StatusBarManagerService","registerStatusBar");
		addMethod(map,"com.android.server.StatusBarManagerService","removeIcon");
		addMethod(map,"com.android.server.StatusBarManagerService","setIcon");
		addMethod(map,"com.android.server.StatusBarManagerService","setIconVisibility");
		addMethod(map,"com.android.server.StatusBarManagerService","setImeWindowStatus");
		addMethod(map,"com.android.server.StatusBarManagerService","setSystemUiVisibility");
		addMethod(map,"com.android.server.StatusBarManagerService","topAppWindowChanged");
		addMethod(map,"com.android.server.TelephonyRegistry","listen");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyCallForwardingChanged");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyCallState");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyCellInfo");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyCellLocation");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyDataActivity");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyDataConnection");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyDataConnectionFailed");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyMessageWaitingChanged");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyOtaspChanged");
		addMethod(map,"com.android.server.TelephonyRegistry","notifyServiceState");
		addMethod(map,"com.android.server.TelephonyRegistry","notifySignalStrength");
		addMethod(map,"com.android.server.TextServicesManagerService","setCurrentSpellChecker");
		addMethod(map,"com.android.server.TextServicesManagerService","setCurrentSpellCheckerSubtype");
		addMethod(map,"com.android.server.TextServicesManagerService","setSpellCheckerEnabled");
		addMethod(map,"com.android.server.ThrottleService","getByteCount");
		addMethod(map,"com.android.server.ThrottleService","getCliffLevel");
		addMethod(map,"com.android.server.ThrottleService","getCliffThreshold");
		addMethod(map,"com.android.server.ThrottleService","getHelpUri");
		addMethod(map,"com.android.server.ThrottleService","getPeriodStartTime");
		addMethod(map,"com.android.server.ThrottleService","getResetTime");
		addMethod(map,"com.android.server.ThrottleService","getThrottle");
		addMethod(map,"com.android.server.UpdateLockService","acquireUpdateLock");
		addMethod(map,"com.android.server.UpdateLockService","releaseUpdateLock");
		addMethod(map,"com.android.server.VibratorService","cancelVibrate");
		addMethod(map,"com.android.server.VibratorService","vibrate");
		addMethod(map,"com.android.server.VibratorService","vibratePattern");
		addMethod(map,"com.android.server.WallpaperManagerService","setDimensionHints");
		addMethod(map,"com.android.server.WallpaperManagerService","setWallpaper");
		addMethod(map,"com.android.server.WallpaperManagerService","setWallpaperComponent");
		addMethod(map,"com.android.server.WifiService","acquireMulticastLock");
		addMethod(map,"com.android.server.WifiService","acquireWifiLock");
		addMethod(map,"com.android.server.WifiService","addOrUpdateNetwork");
		addMethod(map,"com.android.server.WifiService","addToBlacklist");
		addMethod(map,"com.android.server.WifiService","clearBlacklist");
		addMethod(map,"com.android.server.WifiService","disableNetwork");
		addMethod(map,"com.android.server.WifiService","disconnect");
		addMethod(map,"com.android.server.WifiService","enableNetwork");
		addMethod(map,"com.android.server.WifiService","getConfigFile");
		addMethod(map,"com.android.server.WifiService","getConfiguredNetworks");
		addMethod(map,"com.android.server.WifiService","getConnectionInfo");
		addMethod(map,"com.android.server.WifiService","getDhcpInfo");
		addMethod(map,"com.android.server.WifiService","getFrequencyBand");
		addMethod(map,"com.android.server.WifiService","getScanResults");
		addMethod(map,"com.android.server.WifiService","getWifiApConfiguration");
		addMethod(map,"com.android.server.WifiService","getWifiApEnabledState");
		addMethod(map,"com.android.server.WifiService","getWifiEnabledState");
		addMethod(map,"com.android.server.WifiService","getWifiServiceMessenger");
		addMethod(map,"com.android.server.WifiService","getWifiStateMachineMessenger");
		addMethod(map,"com.android.server.WifiService","initializeMulticastFiltering");
		addMethod(map,"com.android.server.WifiService","isMulticastEnabled");
		addMethod(map,"com.android.server.WifiService","pingSupplicant");
		addMethod(map,"com.android.server.WifiService","reassociate");
		addMethod(map,"com.android.server.WifiService","reconnect");
		addMethod(map,"com.android.server.WifiService","releaseMulticastLock");
		addMethod(map,"com.android.server.WifiService","releaseWifiLock");
		addMethod(map,"com.android.server.WifiService","removeNetwork");
		addMethod(map,"com.android.server.WifiService","saveConfiguration");
		addMethod(map,"com.android.server.WifiService","setCountryCode");
		addMethod(map,"com.android.server.WifiService","setFrequencyBand");
		addMethod(map,"com.android.server.WifiService","setWifiApConfiguration");
		addMethod(map,"com.android.server.WifiService","setWifiApEnabled");
		addMethod(map,"com.android.server.WifiService","setWifiEnabled");
		addMethod(map,"com.android.server.WifiService","startScan");
		addMethod(map,"com.android.server.WifiService","startWifi");
		addMethod(map,"com.android.server.WifiService","stopWifi");
		addMethod(map,"com.android.server.WifiService","updateWifiLockWorkSource");
		addMethod(map,"com.android.server.am.ActivityManagerService","activitySlept");
		addMethod(map,"com.android.server.am.ActivityManagerService","activityStopped");
		addMethod(map,"com.android.server.am.ActivityManagerService","bindBackupAgent");
		addMethod(map,"com.android.server.am.ActivityManagerService","bindService");
		addMethod(map,"com.android.server.am.ActivityManagerService","crashApplication");
		addMethod(map,"com.android.server.am.ActivityManagerService","dismissKeyguardOnNextActivity");
		addMethod(map,"com.android.server.am.ActivityManagerService","dumpHeap");
		addMethod(map,"com.android.server.am.ActivityManagerService","finishHeavyWeightApp");
		addMethod(map,"com.android.server.am.ActivityManagerService","finishReceiver");
		addMethod(map,"com.android.server.am.ActivityManagerService","forceStopPackage");
		addMethod(map,"com.android.server.am.ActivityManagerService","getContentProviderExternal");
		addMethod(map,"com.android.server.am.ActivityManagerService","getRecentTasks");
		addMethod(map,"com.android.server.am.ActivityManagerService","getTaskThumbnails");
		addMethod(map,"com.android.server.am.ActivityManagerService","getTasks");
		addMethod(map,"com.android.server.am.ActivityManagerService","goingToSleep");
		addMethod(map,"com.android.server.am.ActivityManagerService","handleApplicationCrash");
		addMethod(map,"com.android.server.am.ActivityManagerService","handleApplicationWtf");
		addMethod(map,"com.android.server.am.ActivityManagerService","killAllBackgroundProcesses");
		addMethod(map,"com.android.server.am.ActivityManagerService","killBackgroundProcesses");
		addMethod(map,"com.android.server.am.ActivityManagerService","moveActivityTaskToBack");
		addMethod(map,"com.android.server.am.ActivityManagerService","moveTaskBackwards");
		addMethod(map,"com.android.server.am.ActivityManagerService","moveTaskToBack");
		addMethod(map,"com.android.server.am.ActivityManagerService","moveTaskToFront");
		addMethod(map,"com.android.server.am.ActivityManagerService","navigateUpTo");
		addMethod(map,"com.android.server.am.ActivityManagerService","profileControl");
		addMethod(map,"com.android.server.am.ActivityManagerService","registerProcessObserver");
		addMethod(map,"com.android.server.am.ActivityManagerService","removeContentProviderExternal");
		addMethod(map,"com.android.server.am.ActivityManagerService","removeSubTask");
		addMethod(map,"com.android.server.am.ActivityManagerService","removeTask");
		addMethod(map,"com.android.server.am.ActivityManagerService","resumeAppSwitches");
		addMethod(map,"com.android.server.am.ActivityManagerService","setActivityController");
		addMethod(map,"com.android.server.am.ActivityManagerService","setAlwaysFinish");
		addMethod(map,"com.android.server.am.ActivityManagerService","setDebugApp");
		addMethod(map,"com.android.server.am.ActivityManagerService","setFrontActivityScreenCompatMode");
		addMethod(map,"com.android.server.am.ActivityManagerService","setLockScreenShown");
		addMethod(map,"com.android.server.am.ActivityManagerService","setPackageAskScreenCompat");
		addMethod(map,"com.android.server.am.ActivityManagerService","setPackageScreenCompatMode");
		addMethod(map,"com.android.server.am.ActivityManagerService","setProcessForeground");
		addMethod(map,"com.android.server.am.ActivityManagerService","setProcessLimit");
		addMethod(map,"com.android.server.am.ActivityManagerService","setRequestedOrientation");
		addMethod(map,"com.android.server.am.ActivityManagerService","shutdown");
		addMethod(map,"com.android.server.am.ActivityManagerService","signalPersistentProcesses");
		addMethod(map,"com.android.server.am.ActivityManagerService","startActivities");
		addMethod(map,"com.android.server.am.ActivityManagerService","startActivitiesInPackage");
		addMethod(map,"com.android.server.am.ActivityManagerService","startActivity");
		addMethod(map,"com.android.server.am.ActivityManagerService","startActivityAndWait");
		addMethod(map,"com.android.server.am.ActivityManagerService","startActivityInPackage");
		addMethod(map,"com.android.server.am.ActivityManagerService","startActivityWithConfig");
		addMethod(map,"com.android.server.am.ActivityManagerService","startRunning");
		addMethod(map,"com.android.server.am.ActivityManagerService","stopAppSwitches");
		addMethod(map,"com.android.server.am.ActivityManagerService","switchUser");
		addMethod(map,"com.android.server.am.ActivityManagerService","unbroadcastIntent");
		addMethod(map,"com.android.server.am.ActivityManagerService","unhandledBack");
		addMethod(map,"com.android.server.am.ActivityManagerService","unregisterReceiver");
		addMethod(map,"com.android.server.am.ActivityManagerService","updateConfiguration");
		addMethod(map,"com.android.server.am.ActivityManagerService","updatePersistentConfiguration");
		addMethod(map,"com.android.server.am.ActivityManagerService","wakingUp");
		addMethod(map,"com.android.server.am.BatteryStatsService","getAwakeTimeBattery");
		addMethod(map,"com.android.server.am.BatteryStatsService","getAwakeTimePlugged");
		addMethod(map,"com.android.server.am.BatteryStatsService","getStatistics");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteBluetoothOff");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteBluetoothOn");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteFullWifiLockAcquired");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteFullWifiLockAcquiredFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteFullWifiLockReleased");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteFullWifiLockReleasedFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteInputEvent");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteNetworkInterfaceType");
		addMethod(map,"com.android.server.am.BatteryStatsService","notePhoneDataConnectionState");
		addMethod(map,"com.android.server.am.BatteryStatsService","notePhoneOff");
		addMethod(map,"com.android.server.am.BatteryStatsService","notePhoneOn");
		addMethod(map,"com.android.server.am.BatteryStatsService","notePhoneSignalStrength");
		addMethod(map,"com.android.server.am.BatteryStatsService","notePhoneState");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScanWifiLockAcquired");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScanWifiLockAcquiredFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScanWifiLockReleased");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScanWifiLockReleasedFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScreenBrightness");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScreenOff");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteScreenOn");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStartGps");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStartSensor");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStartWakelock");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStartWakelockFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStopGps");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStopSensor");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStopWakelock");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteStopWakelockFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteUserActivity");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiMulticastDisabled");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiMulticastDisabledFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiMulticastEnabled");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiMulticastEnabledFromSource");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiOff");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiOn");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiRunning");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiRunningChanged");
		addMethod(map,"com.android.server.am.BatteryStatsService","noteWifiStopped");
		addMethod(map,"com.android.server.am.BatteryStatsService","setBatteryState");
		addMethod(map,"com.android.server.am.UsageStatsService","getAllPkgUsageStats");
		addMethod(map,"com.android.server.am.UsageStatsService","getPkgUsageStats");
		addMethod(map,"com.android.server.am.UsageStatsService","noteLaunchTime");
		addMethod(map,"com.android.server.am.UsageStatsService","notePauseComponent");
		addMethod(map,"com.android.server.am.UsageStatsService","noteResumeComponent");
		addMethod(map,"com.android.server.input.InputManagerService","addKeyboardLayoutForInputDevice");
		addMethod(map,"com.android.server.input.InputManagerService","removeKeyboardLayoutForInputDevice");
		addMethod(map,"com.android.server.input.InputManagerService","setCurrentKeyboardLayoutForInputDevice");
		addMethod(map,"com.android.server.input.InputManagerService","tryPointerSpeed");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","getAppPolicy");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","getAppsWithPolicy");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","getNetworkPolicies");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","getNetworkQuotaInfo");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","getRestrictBackground");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","isUidForeground");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","registerListener");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","setAppPolicy");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","setNetworkPolicies");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","setRestrictBackground");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","snoozeLimit");
		addMethod(map,"com.android.server.net.NetworkPolicyManagerService","unregisterListener");
		addMethod(map,"com.android.server.net.NetworkStatsService","advisePersistThreshold");
		addMethod(map,"com.android.server.net.NetworkStatsService","forceUpdate");
		addMethod(map,"com.android.server.net.NetworkStatsService","getDataLayerSnapshotForUid");
		addMethod(map,"com.android.server.net.NetworkStatsService","getNetworkTotalBytes");
		addMethod(map,"com.android.server.net.NetworkStatsService","incrementOperationCount");
		addMethod(map,"com.android.server.net.NetworkStatsService","openSession");
		addMethod(map,"com.android.server.net.NetworkStatsService","setUidForeground");
		addMethod(map,"com.android.server.pm.PackageManagerService","addPreferredActivity");
		addMethod(map,"com.android.server.pm.PackageManagerService","clearApplicationUserData");
		addMethod(map,"com.android.server.pm.PackageManagerService","clearPackagePreferredActivities");
		addMethod(map,"com.android.server.pm.PackageManagerService","deleteApplicationCacheFiles");
		addMethod(map,"com.android.server.pm.PackageManagerService","deletePackage");
		addMethod(map,"com.android.server.pm.PackageManagerService","freeStorage");
		addMethod(map,"com.android.server.pm.PackageManagerService","freeStorageAndNotify");
		addMethod(map,"com.android.server.pm.PackageManagerService","getPackageSizeInfo");
		addMethod(map,"com.android.server.pm.PackageManagerService","getVerifierDeviceIdentity");
		addMethod(map,"com.android.server.pm.PackageManagerService","grantPermission");
		addMethod(map,"com.android.server.pm.PackageManagerService","installPackage");
		addMethod(map,"com.android.server.pm.PackageManagerService","installPackageWithVerification");
		addMethod(map,"com.android.server.pm.PackageManagerService","movePackage");
		addMethod(map,"com.android.server.pm.PackageManagerService","replacePreferredActivity");
		addMethod(map,"com.android.server.pm.PackageManagerService","revokePermission");
		addMethod(map,"com.android.server.pm.PackageManagerService","setApplicationEnabledSetting");
		addMethod(map,"com.android.server.pm.PackageManagerService","setComponentEnabledSetting");
		addMethod(map,"com.android.server.pm.PackageManagerService","setInstallLocation");
		addMethod(map,"com.android.server.pm.PackageManagerService","setPackageStoppedState");
		addMethod(map,"com.android.server.pm.PackageManagerService","setPermissionEnforced");
		addMethod(map,"com.android.server.sip.SipService","close");
		addMethod(map,"com.android.server.sip.SipService","createSession");
		addMethod(map,"com.android.server.sip.SipService","getListOfProfiles");
		addMethod(map,"com.android.server.sip.SipService","getPendingSession");
		addMethod(map,"com.android.server.sip.SipService","isOpened");
		addMethod(map,"com.android.server.sip.SipService","isRegistered");
		addMethod(map,"com.android.server.sip.SipService","open");
		addMethod(map,"com.android.server.sip.SipService","open3");
		addMethod(map,"com.android.server.sip.SipService","setRegistrationListener");
		addMethod(map,"com.android.server.usb.UsbService","clearDefaults");
		addMethod(map,"com.android.server.usb.UsbService","grantAccessoryPermission");
		addMethod(map,"com.android.server.usb.UsbService","grantDevicePermission");
		addMethod(map,"com.android.server.usb.UsbService","hasDefaults");
		addMethod(map,"com.android.server.usb.UsbService","setAccessoryPackage");
		addMethod(map,"com.android.server.usb.UsbService","setCurrentFunction");
		addMethod(map,"com.android.server.usb.UsbService","setDevicePackage");
		addMethod(map,"com.android.server.usb.UsbService","setMassStorageBackingFile");
		addMethod(map,"com.android.server.wm.WindowManagerService","addAppToken");
		addMethod(map,"com.android.server.wm.WindowManagerService","addWindowToken");
		addMethod(map,"com.android.server.wm.WindowManagerService","disableKeyguard");
		addMethod(map,"com.android.server.wm.WindowManagerService","dismissKeyguard");
		addMethod(map,"com.android.server.wm.WindowManagerService","executeAppTransition");
		addMethod(map,"com.android.server.wm.WindowManagerService","exitKeyguardSecurely");
		addMethod(map,"com.android.server.wm.WindowManagerService","freezeRotation");
		addMethod(map,"com.android.server.wm.WindowManagerService","isViewServerRunning");
		addMethod(map,"com.android.server.wm.WindowManagerService","moveAppToken");
		addMethod(map,"com.android.server.wm.WindowManagerService","moveAppTokensToBottom");
		addMethod(map,"com.android.server.wm.WindowManagerService","moveAppTokensToTop");
		addMethod(map,"com.android.server.wm.WindowManagerService","pauseKeyDispatching");
		addMethod(map,"com.android.server.wm.WindowManagerService","prepareAppTransition");
		addMethod(map,"com.android.server.wm.WindowManagerService","reenableKeyguard");
		addMethod(map,"com.android.server.wm.WindowManagerService","removeAppToken");
		addMethod(map,"com.android.server.wm.WindowManagerService","removeWindowToken");
		addMethod(map,"com.android.server.wm.WindowManagerService","resumeKeyDispatching");
		addMethod(map,"com.android.server.wm.WindowManagerService","screenshotApplications");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAnimationScale");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAnimationScales");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAppGroupId");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAppOrientation");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAppStartingWindow");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAppVisibility");
		addMethod(map,"com.android.server.wm.WindowManagerService","setAppWillBeHidden");
		addMethod(map,"com.android.server.wm.WindowManagerService","setEventDispatching");
		addMethod(map,"com.android.server.wm.WindowManagerService","setFocusedApp");
		addMethod(map,"com.android.server.wm.WindowManagerService","setNewConfiguration");
		addMethod(map,"com.android.server.wm.WindowManagerService","startAppFreezingScreen");
		addMethod(map,"com.android.server.wm.WindowManagerService","startViewServer");
		addMethod(map,"com.android.server.wm.WindowManagerService","statusBarVisibilityChanged");
		addMethod(map,"com.android.server.wm.WindowManagerService","stopAppFreezingScreen");
		addMethod(map,"com.android.server.wm.WindowManagerService","stopViewServer");
		addMethod(map,"com.android.server.wm.WindowManagerService","thawRotation");
		addMethod(map,"com.android.server.wm.WindowManagerService","updateOrientationFromAppTokens");
		addMethod(map,"com.ti.server.StubFmService","resumeFm");
		addMethod(map,"com.ti.server.StubFmService","rxChangeAudioTarget");
		addMethod(map,"com.ti.server.StubFmService","rxChangeDigitalTargetConfiguration");
		addMethod(map,"com.ti.server.StubFmService","rxCompleteScan_nb");
		addMethod(map,"com.ti.server.StubFmService","rxDisable");
		addMethod(map,"com.ti.server.StubFmService","rxDisableAudioRouting");
		addMethod(map,"com.ti.server.StubFmService","rxDisableRds");
		addMethod(map,"com.ti.server.StubFmService","rxDisableRds_nb");
		addMethod(map,"com.ti.server.StubFmService","rxEnable");
		addMethod(map,"com.ti.server.StubFmService","rxEnableAudioRouting");
		addMethod(map,"com.ti.server.StubFmService","rxEnableRds");
		addMethod(map,"com.ti.server.StubFmService","rxEnableRds_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetBand");
		addMethod(map,"com.ti.server.StubFmService","rxGetBand_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetChannelSpacing");
		addMethod(map,"com.ti.server.StubFmService","rxGetChannelSpacing_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetCompleteScanProgress");
		addMethod(map,"com.ti.server.StubFmService","rxGetCompleteScanProgress_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetDeEmphasisFilter");
		addMethod(map,"com.ti.server.StubFmService","rxGetDeEmphasisFilter_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetFMState");
		addMethod(map,"com.ti.server.StubFmService","rxGetFwVersion");
		addMethod(map,"com.ti.server.StubFmService","rxGetMonoStereoMode");
		addMethod(map,"com.ti.server.StubFmService","rxGetMonoStereoMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetMuteMode");
		addMethod(map,"com.ti.server.StubFmService","rxGetMuteMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetRdsAfSwitchMode");
		addMethod(map,"com.ti.server.StubFmService","rxGetRdsAfSwitchMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetRdsGroupMask");
		addMethod(map,"com.ti.server.StubFmService","rxGetRdsGroupMask_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetRdsSystem");
		addMethod(map,"com.ti.server.StubFmService","rxGetRdsSystem_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetRfDependentMuteMode");
		addMethod(map,"com.ti.server.StubFmService","rxGetRfDependentMuteMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetRssi");
		addMethod(map,"com.ti.server.StubFmService","rxGetRssiThreshold");
		addMethod(map,"com.ti.server.StubFmService","rxGetRssiThreshold_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetRssi_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetTunedFrequency");
		addMethod(map,"com.ti.server.StubFmService","rxGetTunedFrequency_nb");
		addMethod(map,"com.ti.server.StubFmService","rxGetVolume");
		addMethod(map,"com.ti.server.StubFmService","rxGetVolume_nb");
		addMethod(map,"com.ti.server.StubFmService","rxIsEnabled");
		addMethod(map,"com.ti.server.StubFmService","rxIsFMPaused");
		addMethod(map,"com.ti.server.StubFmService","rxIsValidChannel");
		addMethod(map,"com.ti.server.StubFmService","rxSeek_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetBand");
		addMethod(map,"com.ti.server.StubFmService","rxSetBand_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetChannelSpacing");
		addMethod(map,"com.ti.server.StubFmService","rxSetChannelSpacing_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetDeEmphasisFilter");
		addMethod(map,"com.ti.server.StubFmService","rxSetDeEmphasisFilter_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetMonoStereoMode");
		addMethod(map,"com.ti.server.StubFmService","rxSetMonoStereoMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetMuteMode");
		addMethod(map,"com.ti.server.StubFmService","rxSetMuteMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetRdsAfSwitchMode");
		addMethod(map,"com.ti.server.StubFmService","rxSetRdsAfSwitchMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetRdsGroupMask");
		addMethod(map,"com.ti.server.StubFmService","rxSetRdsGroupMask_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetRdsSystem");
		addMethod(map,"com.ti.server.StubFmService","rxSetRdsSystem_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetRfDependentMuteMode");
		addMethod(map,"com.ti.server.StubFmService","rxSetRfDependentMuteMode_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetRssiThreshold");
		addMethod(map,"com.ti.server.StubFmService","rxSetRssiThreshold_nb");
		addMethod(map,"com.ti.server.StubFmService","rxSetVolume");
		addMethod(map,"com.ti.server.StubFmService","rxStopCompleteScan");
		addMethod(map,"com.ti.server.StubFmService","rxStopCompleteScan_nb");
		addMethod(map,"com.ti.server.StubFmService","rxStopSeek");
		addMethod(map,"com.ti.server.StubFmService","rxStopSeek_nb");
		addMethod(map,"com.ti.server.StubFmService","rxTune_nb");
		addMethod(map,"com.ti.server.StubFmService","txChangeAudioSource");
		addMethod(map,"com.ti.server.StubFmService","txChangeDigitalSourceConfiguration");
		addMethod(map,"com.ti.server.StubFmService","txDisable");
		addMethod(map,"com.ti.server.StubFmService","txDisableRds");
		addMethod(map,"com.ti.server.StubFmService","txEnable");
		addMethod(map,"com.ti.server.StubFmService","txEnableRds");
		addMethod(map,"com.ti.server.StubFmService","txGetFMState");
		addMethod(map,"com.ti.server.StubFmService","txSetMonoStereoMode");
		addMethod(map,"com.ti.server.StubFmService","txSetMuteMode");
		addMethod(map,"com.ti.server.StubFmService","txSetPowerLevel");
		addMethod(map,"com.ti.server.StubFmService","txSetPreEmphasisFilter");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsAfCode");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsECC");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsMusicSpeechFlag");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsPiCode");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsPsDisplayMode");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsPsScrollSpeed");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsPtyCode");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsTextPsMsg");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsTextRepertoire");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsTextRtMsg");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsTrafficCodes");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsTransmissionMode");
		addMethod(map,"com.ti.server.StubFmService","txSetRdsTransmittedGroupsMask");
		addMethod(map,"com.ti.server.StubFmService","txStartTransmission");
		addMethod(map,"com.ti.server.StubFmService","txStopTransmission");
		addMethod(map,"com.ti.server.StubFmService","txTune");
		addMethod(map,"com.ti.server.StubFmService","txWriteRdsRawData");
		addMethod(map,"android.accounts.AccountAuthenticatorActivity","clearWallpaper");
		addMethod(map,"android.accounts.AccountAuthenticatorActivity","removeStickyBroadcast");
		addMethod(map,"android.accounts.AccountAuthenticatorActivity","setWallpaper");
		addMethod(map,"android.accounts.AccountAuthenticatorActivity","setWallpaper");
		addMethod(map,"android.accounts.AccountAuthenticatorActivity","unregisterReceiver");
		addMethod(map,"android.accounts.AccountManager","addAccountExplicitly");
		addMethod(map,"android.accounts.AccountManager","addOnAccountsUpdatedListener");
		addMethod(map,"android.accounts.AccountManager","clearPassword");
		addMethod(map,"android.accounts.AccountManager","getAccounts");
		addMethod(map,"android.accounts.AccountManager","getAccountsByType");
		addMethod(map,"android.accounts.AccountManager","getPassword");
		addMethod(map,"android.accounts.AccountManager","getUserData");
		addMethod(map,"android.accounts.AccountManager","invalidateAuthToken");
		addMethod(map,"android.accounts.AccountManager","peekAuthToken");
		addMethod(map,"android.accounts.AccountManager","removeOnAccountsUpdatedListener");
		addMethod(map,"android.accounts.AccountManager","setAuthToken");
		addMethod(map,"android.accounts.AccountManager","setPassword");
		addMethod(map,"android.accounts.AccountManager","setUserData");
		addMethod(map,"android.app.Activity","clearWallpaper");
		addMethod(map,"android.app.Activity","moveTaskToBack");
		addMethod(map,"android.app.Activity","navigateUpTo");
		addMethod(map,"android.app.Activity","navigateUpToFromChild");
		addMethod(map,"android.app.Activity","onMenuItemSelected");
		addMethod(map,"android.app.Activity","onNavigateUp");
		addMethod(map,"android.app.Activity","onNavigateUpFromChild");
		addMethod(map,"android.app.Activity","removeStickyBroadcast");
		addMethod(map,"android.app.Activity","setRequestedOrientation");
		addMethod(map,"android.app.Activity","setWallpaper");
		addMethod(map,"android.app.Activity","setWallpaper");
		addMethod(map,"android.app.Activity","unregisterReceiver");
		addMethod(map,"android.app.ActivityGroup","clearWallpaper");
		addMethod(map,"android.app.ActivityGroup","removeStickyBroadcast");
		addMethod(map,"android.app.ActivityGroup","setWallpaper");
		addMethod(map,"android.app.ActivityGroup","setWallpaper");
		addMethod(map,"android.app.ActivityGroup","unregisterReceiver");
		addMethod(map,"android.app.ActivityManager","getRecentTasks");
		addMethod(map,"android.app.ActivityManager","getRunningTasks");
		addMethod(map,"android.app.ActivityManager","killBackgroundProcesses");
		addMethod(map,"android.app.ActivityManager","moveTaskToFront");
		addMethod(map,"android.app.ActivityManager","moveTaskToFront");
		addMethod(map,"android.app.ActivityManager","restartPackage");
		addMethod(map,"android.app.AlarmManager","setTimeZone");
		addMethod(map,"android.app.AliasActivity","clearWallpaper");
		addMethod(map,"android.app.AliasActivity","removeStickyBroadcast");
		addMethod(map,"android.app.AliasActivity","setWallpaper");
		addMethod(map,"android.app.AliasActivity","setWallpaper");
		addMethod(map,"android.app.AliasActivity","unregisterReceiver");
		addMethod(map,"android.app.Application","clearWallpaper");
		addMethod(map,"android.app.Application","removeStickyBroadcast");
		addMethod(map,"android.app.Application","setWallpaper");
		addMethod(map,"android.app.Application","setWallpaper");
		addMethod(map,"android.app.Application","unregisterReceiver");
		addMethod(map,"android.app.ExpandableListActivity","clearWallpaper");
		addMethod(map,"android.app.ExpandableListActivity","removeStickyBroadcast");
		addMethod(map,"android.app.ExpandableListActivity","setWallpaper");
		addMethod(map,"android.app.ExpandableListActivity","setWallpaper");
		addMethod(map,"android.app.ExpandableListActivity","unregisterReceiver");
		addMethod(map,"android.app.KeyguardManager$KeyguardLock","disableKeyguard");
		addMethod(map,"android.app.KeyguardManager$KeyguardLock","reenableKeyguard");
		addMethod(map,"android.app.KeyguardManager","exitKeyguardSecurely");
		addMethod(map,"android.app.ListActivity","clearWallpaper");
		addMethod(map,"android.app.ListActivity","removeStickyBroadcast");
		addMethod(map,"android.app.ListActivity","setWallpaper");
		addMethod(map,"android.app.ListActivity","setWallpaper");
		addMethod(map,"android.app.ListActivity","unregisterReceiver");
		addMethod(map,"android.app.NativeActivity","clearWallpaper");
		addMethod(map,"android.app.NativeActivity","removeStickyBroadcast");
		addMethod(map,"android.app.NativeActivity","setWallpaper");
		addMethod(map,"android.app.NativeActivity","setWallpaper");
		addMethod(map,"android.app.NativeActivity","unregisterReceiver");
		addMethod(map,"android.app.TabActivity","clearWallpaper");
		addMethod(map,"android.app.TabActivity","removeStickyBroadcast");
		addMethod(map,"android.app.TabActivity","setWallpaper");
		addMethod(map,"android.app.TabActivity","setWallpaper");
		addMethod(map,"android.app.TabActivity","unregisterReceiver");
		addMethod(map,"android.app.WallpaperManager","clear");
		addMethod(map,"android.app.WallpaperManager","setBitmap");
		addMethod(map,"android.app.WallpaperManager","setResource");
		addMethod(map,"android.app.WallpaperManager","setStream");
		addMethod(map,"android.app.WallpaperManager","suggestDesiredDimensions");
		addMethod(map,"android.app.backup.BackupAgentHelper","clearWallpaper");
		addMethod(map,"android.app.backup.BackupAgentHelper","removeStickyBroadcast");
		addMethod(map,"android.app.backup.BackupAgentHelper","setWallpaper");
		addMethod(map,"android.app.backup.BackupAgentHelper","setWallpaper");
		addMethod(map,"android.app.backup.BackupAgentHelper","unregisterReceiver");
		addMethod(map,"android.bluetooth.BluetoothA2dp","getConnectedDevices");
		addMethod(map,"android.bluetooth.BluetoothA2dp","getConnectionState");
		addMethod(map,"android.bluetooth.BluetoothA2dp","getDevicesMatchingConnectionStates");
		addMethod(map,"android.bluetooth.BluetoothA2dp","isA2dpPlaying");
		addMethod(map,"android.bluetooth.BluetoothAdapter","cancelDiscovery");
		addMethod(map,"android.bluetooth.BluetoothAdapter","disable");
		addMethod(map,"android.bluetooth.BluetoothAdapter","enable");
		addMethod(map,"android.bluetooth.BluetoothAdapter","getAddress");
		addMethod(map,"android.bluetooth.BluetoothAdapter","getBondedDevices");
		addMethod(map,"android.bluetooth.BluetoothAdapter","getName");
		addMethod(map,"android.bluetooth.BluetoothAdapter","getProfileConnectionState");
		addMethod(map,"android.bluetooth.BluetoothAdapter","getScanMode");
		addMethod(map,"android.bluetooth.BluetoothAdapter","getState");
		addMethod(map,"android.bluetooth.BluetoothAdapter","isDiscovering");
		addMethod(map,"android.bluetooth.BluetoothAdapter","isEnabled");
		addMethod(map,"android.bluetooth.BluetoothAdapter","listenUsingInsecureRfcommWithServiceRecord");
		addMethod(map,"android.bluetooth.BluetoothAdapter","listenUsingRfcommWithServiceRecord");
		addMethod(map,"android.bluetooth.BluetoothAdapter","setName");
		addMethod(map,"android.bluetooth.BluetoothAdapter","startDiscovery");
		addMethod(map,"android.bluetooth.BluetoothDevice","fetchUuidsWithSdp");
		addMethod(map,"android.bluetooth.BluetoothDevice","getBluetoothClass");
		addMethod(map,"android.bluetooth.BluetoothDevice","getBondState");
		addMethod(map,"android.bluetooth.BluetoothDevice","getName");
		addMethod(map,"android.bluetooth.BluetoothDevice","getUuids");
		addMethod(map,"android.bluetooth.BluetoothHeadset","getConnectedDevices");
		addMethod(map,"android.bluetooth.BluetoothHeadset","getConnectionState");
		addMethod(map,"android.bluetooth.BluetoothHeadset","getDevicesMatchingConnectionStates");
		addMethod(map,"android.bluetooth.BluetoothHeadset","isAudioConnected");
		addMethod(map,"android.bluetooth.BluetoothHeadset","startVoiceRecognition");
		addMethod(map,"android.bluetooth.BluetoothHeadset","stopVoiceRecognition");
		addMethod(map,"android.bluetooth.BluetoothHealth","connectChannelToSource");
		addMethod(map,"android.bluetooth.BluetoothHealth","disconnectChannel");
		addMethod(map,"android.bluetooth.BluetoothHealth","getConnectedDevices");
		addMethod(map,"android.bluetooth.BluetoothHealth","getConnectionState");
		addMethod(map,"android.bluetooth.BluetoothHealth","getDevicesMatchingConnectionStates");
		addMethod(map,"android.bluetooth.BluetoothHealth","getMainChannelFd");
		addMethod(map,"android.bluetooth.BluetoothHealth","registerSinkAppConfiguration");
		addMethod(map,"android.bluetooth.BluetoothHealth","unregisterAppConfiguration");
		addMethod(map,"android.bluetooth.BluetoothSocket","connect");
		addMethod(map,"android.content.BroadcastReceiver$PendingResult","finish");
		addMethod(map,"android.content.ContextWrapper","clearWallpaper");
		addMethod(map,"android.content.ContextWrapper","removeStickyBroadcast");
		addMethod(map,"android.content.ContextWrapper","setWallpaper");
		addMethod(map,"android.content.ContextWrapper","setWallpaper");
		addMethod(map,"android.content.ContextWrapper","unregisterReceiver");
		addMethod(map,"android.content.MutableContextWrapper","clearWallpaper");
		addMethod(map,"android.content.MutableContextWrapper","removeStickyBroadcast");
		addMethod(map,"android.content.MutableContextWrapper","setWallpaper");
		addMethod(map,"android.content.MutableContextWrapper","setWallpaper");
		addMethod(map,"android.content.MutableContextWrapper","unregisterReceiver");
		addMethod(map,"android.inputmethodservice.InputMethodService","clearWallpaper");
		addMethod(map,"android.inputmethodservice.InputMethodService","removeStickyBroadcast");
		addMethod(map,"android.inputmethodservice.InputMethodService","setWallpaper");
		addMethod(map,"android.inputmethodservice.InputMethodService","setWallpaper");
		addMethod(map,"android.inputmethodservice.InputMethodService","unregisterReceiver");
		addMethod(map,"android.location.LocationManager","addGpsStatusListener");
		addMethod(map,"android.location.LocationManager","addNmeaListener");
		addMethod(map,"android.location.LocationManager","addProximityAlert");
		addMethod(map,"android.location.LocationManager","addTestProvider");
		addMethod(map,"android.location.LocationManager","clearTestProviderEnabled");
		addMethod(map,"android.location.LocationManager","clearTestProviderLocation");
		addMethod(map,"android.location.LocationManager","clearTestProviderStatus");
		addMethod(map,"android.location.LocationManager","getBestProvider");
		addMethod(map,"android.location.LocationManager","getLastKnownLocation");
		addMethod(map,"android.location.LocationManager","getProvider");
		addMethod(map,"android.location.LocationManager","getProviders");
		addMethod(map,"android.location.LocationManager","getProviders");
		addMethod(map,"android.location.LocationManager","isProviderEnabled");
		addMethod(map,"android.location.LocationManager","removeTestProvider");
		addMethod(map,"android.location.LocationManager","requestLocationUpdates");
		addMethod(map,"android.location.LocationManager","requestLocationUpdates");
		addMethod(map,"android.location.LocationManager","requestLocationUpdates");
		addMethod(map,"android.location.LocationManager","requestLocationUpdates");
		addMethod(map,"android.location.LocationManager","requestLocationUpdates");
		addMethod(map,"android.location.LocationManager","requestSingleUpdate");
		addMethod(map,"android.location.LocationManager","requestSingleUpdate");
		addMethod(map,"android.location.LocationManager","requestSingleUpdate");
		addMethod(map,"android.location.LocationManager","requestSingleUpdate");
		addMethod(map,"android.location.LocationManager","sendExtraCommand");
		addMethod(map,"android.location.LocationManager","setTestProviderEnabled");
		addMethod(map,"android.location.LocationManager","setTestProviderLocation");
		addMethod(map,"android.location.LocationManager","setTestProviderStatus");
		addMethod(map,"android.media.AsyncPlayer","play");
		addMethod(map,"android.media.AsyncPlayer","stop");
		addMethod(map,"android.media.AudioManager","setBluetoothScoOn");
		addMethod(map,"android.media.AudioManager","setMode");
		addMethod(map,"android.media.AudioManager","setSpeakerphoneOn");
		addMethod(map,"android.media.AudioManager","startBluetoothSco");
		addMethod(map,"android.media.AudioManager","stopBluetoothSco");
		addMethod(map,"android.media.MediaPlayer","pause");
		addMethod(map,"android.media.MediaPlayer","release");
		addMethod(map,"android.media.MediaPlayer","reset");
		addMethod(map,"android.media.MediaPlayer","setWakeMode");
		addMethod(map,"android.media.MediaPlayer","start");
		addMethod(map,"android.media.MediaPlayer","stop");
		addMethod(map,"android.media.Ringtone","play");
		addMethod(map,"android.media.Ringtone","setStreamType");
		addMethod(map,"android.media.Ringtone","stop");
		addMethod(map,"android.media.RingtoneManager","getRingtone");
		addMethod(map,"android.media.RingtoneManager","getRingtone");
		addMethod(map,"android.media.RingtoneManager","stopPreviousRingtone");
		addMethod(map,"android.net.ConnectivityManager","getActiveNetworkInfo");
		addMethod(map,"android.net.ConnectivityManager","getAllNetworkInfo");
		addMethod(map,"android.net.ConnectivityManager","getNetworkInfo");
		addMethod(map,"android.net.ConnectivityManager","getNetworkPreference");
		addMethod(map,"android.net.ConnectivityManager","isActiveNetworkMetered");
		addMethod(map,"android.net.ConnectivityManager","requestRouteToHost");
		addMethod(map,"android.net.ConnectivityManager","setNetworkPreference");
		addMethod(map,"android.net.ConnectivityManager","startUsingNetworkFeature");
		addMethod(map,"android.net.ConnectivityManager","stopUsingNetworkFeature");
		addMethod(map,"android.net.VpnService","clearWallpaper");
		addMethod(map,"android.net.VpnService","removeStickyBroadcast");
		addMethod(map,"android.net.VpnService","setWallpaper");
		addMethod(map,"android.net.VpnService","setWallpaper");
		addMethod(map,"android.net.VpnService","unregisterReceiver");
		addMethod(map,"android.net.sip.SipAudioCall","close");
		addMethod(map,"android.net.sip.SipAudioCall","endCall");
		addMethod(map,"android.net.sip.SipAudioCall","setSpeakerMode");
		addMethod(map,"android.net.sip.SipAudioCall","startAudio");
		addMethod(map,"android.net.sip.SipManager","close");
		addMethod(map,"android.net.sip.SipManager","createSipSession");
		addMethod(map,"android.net.sip.SipManager","getSessionFor");
		addMethod(map,"android.net.sip.SipManager","isOpened");
		addMethod(map,"android.net.sip.SipManager","isRegistered");
		addMethod(map,"android.net.sip.SipManager","makeAudioCall");
		addMethod(map,"android.net.sip.SipManager","makeAudioCall");
		addMethod(map,"android.net.sip.SipManager","open");
		addMethod(map,"android.net.sip.SipManager","open");
		addMethod(map,"android.net.sip.SipManager","register");
		addMethod(map,"android.net.sip.SipManager","setRegistrationListener");
		addMethod(map,"android.net.sip.SipManager","takeAudioCall");
		addMethod(map,"android.net.sip.SipManager","unregister");
		addMethod(map,"android.net.wifi.WifiManager$MulticastLock","acquire");
		addMethod(map,"android.net.wifi.WifiManager$MulticastLock","release");
		addMethod(map,"android.net.wifi.WifiManager$WifiLock","acquire");
		addMethod(map,"android.net.wifi.WifiManager$WifiLock","release");
		addMethod(map,"android.net.wifi.WifiManager","addNetwork");
		addMethod(map,"android.net.wifi.WifiManager","disableNetwork");
		addMethod(map,"android.net.wifi.WifiManager","disconnect");
		addMethod(map,"android.net.wifi.WifiManager","enableNetwork");
		addMethod(map,"android.net.wifi.WifiManager","getConfiguredNetworks");
		addMethod(map,"android.net.wifi.WifiManager","getConnectionInfo");
		addMethod(map,"android.net.wifi.WifiManager","getDhcpInfo");
		addMethod(map,"android.net.wifi.WifiManager","getScanResults");
		addMethod(map,"android.net.wifi.WifiManager","getWifiState");
		addMethod(map,"android.net.wifi.WifiManager","isWifiEnabled");
		addMethod(map,"android.net.wifi.WifiManager","pingSupplicant");
		addMethod(map,"android.net.wifi.WifiManager","reassociate");
		addMethod(map,"android.net.wifi.WifiManager","reconnect");
		addMethod(map,"android.net.wifi.WifiManager","removeNetwork");
		addMethod(map,"android.net.wifi.WifiManager","saveConfiguration");
		addMethod(map,"android.net.wifi.WifiManager","setWifiEnabled");
		addMethod(map,"android.net.wifi.WifiManager","startScan");
		addMethod(map,"android.net.wifi.WifiManager","updateNetwork");
		addMethod(map,"android.net.wifi.p2p.WifiP2pManager","initialize");
		addMethod(map,"android.nfc.NfcAdapter","disableForegroundDispatch");
		addMethod(map,"android.nfc.NfcAdapter","disableForegroundNdefPush");
		addMethod(map,"android.nfc.NfcAdapter","enableForegroundDispatch");
		addMethod(map,"android.nfc.NfcAdapter","enableForegroundNdefPush");
		addMethod(map,"android.nfc.NfcAdapter","setBeamPushUris");
		addMethod(map,"android.nfc.NfcAdapter","setBeamPushUrisCallback");
		addMethod(map,"android.nfc.NfcAdapter","setNdefPushMessage");
		addMethod(map,"android.nfc.NfcAdapter","setNdefPushMessageCallback");
		addMethod(map,"android.nfc.NfcAdapter","setOnNdefPushCompleteCallback");
		addMethod(map,"android.nfc.tech.BasicTagTechnology","close");
		addMethod(map,"android.nfc.tech.BasicTagTechnology","connect");
		addMethod(map,"android.nfc.tech.IsoDep","close");
		addMethod(map,"android.nfc.tech.IsoDep","connect");
		addMethod(map,"android.nfc.tech.IsoDep","getTimeout");
		addMethod(map,"android.nfc.tech.IsoDep","setTimeout");
		addMethod(map,"android.nfc.tech.IsoDep","transceive");
		addMethod(map,"android.nfc.tech.MifareClassic","authenticateSectorWithKeyA");
		addMethod(map,"android.nfc.tech.MifareClassic","authenticateSectorWithKeyB");
		addMethod(map,"android.nfc.tech.MifareClassic","close");
		addMethod(map,"android.nfc.tech.MifareClassic","connect");
		addMethod(map,"android.nfc.tech.MifareClassic","decrement");
		addMethod(map,"android.nfc.tech.MifareClassic","getTimeout");
		addMethod(map,"android.nfc.tech.MifareClassic","increment");
		addMethod(map,"android.nfc.tech.MifareClassic","readBlock");
		addMethod(map,"android.nfc.tech.MifareClassic","restore");
		addMethod(map,"android.nfc.tech.MifareClassic","setTimeout");
		addMethod(map,"android.nfc.tech.MifareClassic","transceive");
		addMethod(map,"android.nfc.tech.MifareClassic","transfer");
		addMethod(map,"android.nfc.tech.MifareClassic","writeBlock");
		addMethod(map,"android.nfc.tech.MifareUltralight","close");
		addMethod(map,"android.nfc.tech.MifareUltralight","connect");
		addMethod(map,"android.nfc.tech.MifareUltralight","getTimeout");
		addMethod(map,"android.nfc.tech.MifareUltralight","readPages");
		addMethod(map,"android.nfc.tech.MifareUltralight","setTimeout");
		addMethod(map,"android.nfc.tech.MifareUltralight","transceive");
		addMethod(map,"android.nfc.tech.MifareUltralight","writePage");
		addMethod(map,"android.nfc.tech.Ndef","close");
		addMethod(map,"android.nfc.tech.Ndef","connect");
		addMethod(map,"android.nfc.tech.Ndef","getNdefMessage");
		addMethod(map,"android.nfc.tech.Ndef","makeReadOnly");
		addMethod(map,"android.nfc.tech.Ndef","writeNdefMessage");
		addMethod(map,"android.nfc.tech.NdefFormatable","close");
		addMethod(map,"android.nfc.tech.NdefFormatable","connect");
		addMethod(map,"android.nfc.tech.NdefFormatable","format");
		addMethod(map,"android.nfc.tech.NdefFormatable","formatReadOnly");
		addMethod(map,"android.nfc.tech.NfcA","close");
		addMethod(map,"android.nfc.tech.NfcA","connect");
		addMethod(map,"android.nfc.tech.NfcA","getTimeout");
		addMethod(map,"android.nfc.tech.NfcA","setTimeout");
		addMethod(map,"android.nfc.tech.NfcA","transceive");
		addMethod(map,"android.nfc.tech.NfcB","close");
		addMethod(map,"android.nfc.tech.NfcB","connect");
		addMethod(map,"android.nfc.tech.NfcB","transceive");
		addMethod(map,"android.nfc.tech.NfcF","close");
		addMethod(map,"android.nfc.tech.NfcF","connect");
		addMethod(map,"android.nfc.tech.NfcF","getTimeout");
		addMethod(map,"android.nfc.tech.NfcF","setTimeout");
		addMethod(map,"android.nfc.tech.NfcF","transceive");
		addMethod(map,"android.nfc.tech.NfcV","close");
		addMethod(map,"android.nfc.tech.NfcV","connect");
		addMethod(map,"android.nfc.tech.NfcV","transceive");
		addMethod(map,"android.os.PowerManager$WakeLock","acquire");
		addMethod(map,"android.os.PowerManager$WakeLock","acquire");
		addMethod(map,"android.os.PowerManager$WakeLock","release");
		addMethod(map,"android.os.SystemVibrator","cancel");
		addMethod(map,"android.os.SystemVibrator","vibrate");
		addMethod(map,"android.os.SystemVibrator","vibrate");
		addMethod(map,"android.telephony.SmsManager","sendDataMessage");
		addMethod(map,"android.telephony.SmsManager","sendMultipartTextMessage");
		addMethod(map,"android.telephony.SmsManager","sendTextMessage");
		addMethod(map,"android.telephony.TelephonyManager","getCellLocation");
		addMethod(map,"android.telephony.TelephonyManager","getDeviceId");
		addMethod(map,"android.telephony.TelephonyManager","getDeviceSoftwareVersion");
		addMethod(map,"android.telephony.TelephonyManager","getLine1Number");
		addMethod(map,"android.telephony.TelephonyManager","getNeighboringCellInfo");
		addMethod(map,"android.telephony.TelephonyManager","getSimSerialNumber");
		addMethod(map,"android.telephony.TelephonyManager","getSubscriberId");
		addMethod(map,"android.telephony.TelephonyManager","getVoiceMailAlphaTag");
		addMethod(map,"android.telephony.TelephonyManager","getVoiceMailNumber");
		addMethod(map,"android.telephony.TelephonyManager","listen");
		addMethod(map,"android.telephony.gsm.SmsManager","sendDataMessage");
		addMethod(map,"android.telephony.gsm.SmsManager","sendMultipartTextMessage");
		addMethod(map,"android.telephony.gsm.SmsManager","sendTextMessage");
		addMethod(map,"android.test.IsolatedContext","clearWallpaper");
		addMethod(map,"android.test.IsolatedContext","removeStickyBroadcast");
		addMethod(map,"android.test.IsolatedContext","setWallpaper");
		addMethod(map,"android.test.IsolatedContext","setWallpaper");
		addMethod(map,"android.test.IsolatedContext","unregisterReceiver");
		addMethod(map,"android.test.RenamingDelegatingContext","clearWallpaper");
		addMethod(map,"android.test.RenamingDelegatingContext","removeStickyBroadcast");
		addMethod(map,"android.test.RenamingDelegatingContext","setWallpaper");
		addMethod(map,"android.test.RenamingDelegatingContext","setWallpaper");
		addMethod(map,"android.test.RenamingDelegatingContext","unregisterReceiver");
		addMethod(map,"android.test.mock.MockApplication","clearWallpaper");
		addMethod(map,"android.test.mock.MockApplication","removeStickyBroadcast");
		addMethod(map,"android.test.mock.MockApplication","setWallpaper");
		addMethod(map,"android.test.mock.MockApplication","setWallpaper");
		addMethod(map,"android.test.mock.MockApplication","unregisterReceiver");
		addMethod(map,"android.view.ContextThemeWrapper","clearWallpaper");
		addMethod(map,"android.view.ContextThemeWrapper","removeStickyBroadcast");
		addMethod(map,"android.view.ContextThemeWrapper","setWallpaper");
		addMethod(map,"android.view.ContextThemeWrapper","setWallpaper");
		addMethod(map,"android.view.ContextThemeWrapper","unregisterReceiver");
		addMethod(map,"android.widget.VideoView","onKeyDown");
		addMethod(map,"android.widget.VideoView","pause");
		addMethod(map,"android.widget.VideoView","resume");
		addMethod(map,"android.widget.VideoView","setVideoPath");
		addMethod(map,"android.widget.VideoView","setVideoURI");
		addMethod(map,"android.widget.VideoView","start");
		addMethod(map,"android.widget.VideoView","stopPlayback");
		addMethod(map,"android.widget.VideoView","suspend");
		addMethod(map,"android.widget.ZoomButtonsController","setVisible");

 //-----------------------------------------------
        return new LinkedList<>(map.values());
    }

    private void addMethod(HashMap<String,ClassMethodGroup> map,String className,String methodName){
        if (!map.containsKey(className)){
            map.put(className,new ClassMethodGroup(className));
        }
        try{
            map.get(className).addMethod(methodName);
        }catch (NullPointerException e){
            e.printStackTrace();
        }
    }
}
